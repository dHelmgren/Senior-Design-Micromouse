##########################################
# Team Excelsior
# Bench Testing
# 
# Author: Emilia Holbik, Devon Griggs
# 
# This file provides the bench test for the robot
# deciding if it needs to make a tuple due to an
# upcoming right turn.
#
# (): sensor output read in by microcontroller and
#     already converted to a float which tells the
#     number of centimeters wall is away from sensor
# []: encoder output read in by microcontroller in
#     the form of number of ticks since the last time
#     encoder output was read
# $ : marks the end of the simulation
#
# Notes on Projected side of Minitaur v. 1.0:
#     9 cm long
#     9 cm wide
#     6 cm tall
##########################################
#
# Hardware-related information:
#  - L and R IR sensors can't see closer than 4 cm
#  - Assume that the sensors are at 45 degree angles
#    from the walls
#  - Assume that the IR sensors are 1 cm from the 
#    front of the robot
#  - Assume that the robot is 9 cm long and 9 cm wide
#  - Assume the diameter of 1 wheel is 31.2mm. Thus, the
#    circumference of 1 wheel is pi*d = 0.980 cm.
#
# Agent-related information:
#  - Assume that we want to call the AI to make a
#    decision as soon as we recognize that there is
#    a wall missing
#
# Emilia's calculations:
# Since the robot is 9 cm wide and the maze part is
# 16.8 cm, 16.8 - 9 = 7.8 cm wiggle room. The sensors
# can sense 2.8 cm immediately L and R. That leaves
# (7.8 - 2*2.8)/2 = 1.1 cm that is the buffer on either
# side, in which we don't have to auto correct yet. 
# Make it 1.0 cm for good measure, to be safe. 
# 
# 
# Format: (L, S, R)
#         [L, R]
#
# Robot starts out being exactly in the middle: 3.9 cm
# from the wall on either L or R side.
(5.515, 20.500, 5.515)
(5.515, 20.400, 5.515)
(5.515, 20.300, 5.515)
(5.515, 20.200, 5.515)
(5.515, 20.100, 5.515)
(5.515, 20.000, 5.515)
(5.515, 19.900, 5.515)
# At 18.6 cm, see absence of R wall
# Calculated by 18sqrt(2)+3.9sqrt(2)
(5.515, 18.600, 31.820)
(5.515, 18.500, 31.678)
(5.515, 18.400, 31.537)
# We wait 3 times of unexpected sensor input and then
# decide a tuple must be made, so call upon the encoders
# to give us this information in number of ticks.
# Assume that the last tuple was 3 units away (18*3=54cm);
# thus, there were 55 ticks since last read. However, Janel
# is doing this conversion for us, so we are reading in the
# number of centimeters.
[54, 54]
(5.515, 18.300, 31.396)
(5.515, 18.200, 31.254)
(5.515, 18.100, 31.113)
(5.515, 18.000, 30.971)
(5.515, 17.900, 30.830)
(5.515, 17.800, 30.688)
(5.515, 17.700, 30.547)
(5.515, 17.600, 30.406)
(5.515, 17.500, 30.264)
(5.515, 17.400, 30.123)
(5.515, 17.300, 29.981)
(5.515, 17.200, 29.840)
(5.515, 17.100, 29.698)
(5.515, 17.000, 29.557)
(5.515, 16.900, 29.416)
(5.515, 16.800, 29.274)
(5.515, 16.700, 29.133)
(5.515, 16.600, 28.991)
(5.515, 16.500, 28.850)
(5.515, 16.400, 28.709)
(5.515, 16.300, 28.567)
(5.515, 16.200, 28.426)
(5.515, 16.100, 28.284)
(5.515, 16.000, 28.143)
(5.515, 15.900, 28.001)
(5.515, 15.800, 27.860)
(5.515, 15.700, 27.719)
(5.515, 15.600, 27.577)
(5.515, 15.500, 27.436)
(5.515, 15.400, 27.294)
(5.515, 15.300, 27.153)
(5.515, 15.200, 27.011)
(5.515, 15.100, 26.870)
(5.515, 15.000, 26.729)
(5.515, 14.900, 26.587)
(5.515, 14.800, 26.446)
(5.515, 14.700, 26.304)
(5.515, 14.600, 26.163)
(5.515, 14.500, 26.022)
(5.515, 14.400, 25.880)
(5.515, 14.300, 25.739)
(5.515, 14.200, 25.597)
(5.515, 14.100, 25.456)
(5.515, 14.000, 25.314)
(5.515, 13.900, 25.173)
(5.515, 13.800, 25.032)
(5.515, 13.700, 24.890)
(5.515, 13.600, 24.749)
(5.515, 13.500, 24.607)
(5.515, 13.400, 24.466)
(5.515, 13.300, 24.324)
(5.515, 13.200, 24.183)
(5.515, 13.100, 24.042)
(5.515, 13.000, 23.900)
(5.515, 12.900, 23.759)
(5.515, 12.800, 23.617)
(5.515, 12.700, 23.476)
(5.515, 12.600, 23.334)
(5.515, 12.500, 23.193)
(5.515, 12.400, 23.052)
(5.515, 12.300, 22.910)
(5.515, 12.200, 22.769)
(5.515, 12.100, 22.627)
(5.515, 12.000, 22.486)
(5.515, 11.900, 22.345)
(5.515, 11.800, 22.203)
(5.515, 11.700, 22.062)
(5.515, 11.600, 21.920)
(5.515, 11.500, 21.779)
(5.515, 11.400, 21.637)
(5.515, 11.300, 21.496)
(5.515, 11.200, 21.355)
(5.515, 11.100, 21.213)
(5.515, 11.000, 21.072)
(5.515, 10.900, 20.930)
(5.515, 10.800, 20.789)
(5.515, 10.700, 20.647)
(5.515, 10.600, 20.506)
(5.515, 10.500, 20.365)
(5.515, 10.400, 20.223)
(5.515, 10.300, 20.082)
(5.515, 10.200, 19.940)
(5.515, 10.100, 19.799)
(5.515, 10.000, 19.658)
(5.515, 9.900, 19.516)
(5.515, 9.800, 19.375)
(5.515, 9.700, 19.233)
(5.515, 9.600, 19.092)
(5.515, 9.500, 18.950)
(5.515, 9.400, 18.809)
(5.515, 9.300, 18.668)
(5.515, 9.200, 18.526)
(5.515, 9.100, 18.385)
(5.515, 9.000, 18.243)
(5.515, 8.900, 18.102)
(5.515, 8.800, 17.960)
(5.515, 8.700, 17.819)
(5.515, 8.600, 17.678)
(5.515, 8.500, 17.536)
(5.515, 8.400, 17.395)
(5.515, 8.300, 17.253)
(5.515, 8.200, 17.112)
(5.515, 8.100, 16.971)
(5.515, 8.000, 16.829)
(5.515, 7.900, 16.688)
(5.515, 7.800, 16.546)
(5.515, 7.700, 16.405)
(5.515, 7.600, 16.263)
(5.515, 7.500, 16.122)
(5.515, 7.400, 15.981)
(5.515, 7.300, 15.839)
(5.515, 7.200, 15.698)
(5.515, 7.100, 15.556)
(5.515, 7.000, 15.415)
(5.515, 6.900, 15.273)
(5.515, 6.800, 15.132)
(5.515, 6.700, 14.991)
(5.515, 6.600, 14.849)
(5.515, 6.500, 14.708)
(5.515, 6.400, 14.566)
(5.515, 6.300, 14.425)
(5.515, 6.200, 14.284)
(5.515, 6.100, 14.142)
(5.515, 6.000, 14.001)
(5.515, 5.900, 13.859)
(5.515, 5.800, 13.718)
(5.515, 5.700, 13.576)
(5.515, 5.600, 13.435)
(5.515, 5.500, 13.294)
(5.515, 5.400, 13.152)
(5.515, 5.300, 13.011)
(5.515, 5.200, 12.869)
(5.515, 5.100, 12.728)
(5.515, 5.000, 12.586)
# Robot is 4.9 cm away from the front wall, and thus
# exactly in the middle of the square (given the 
# assumptions). Turn after reading this.
(5.515, 4.900, 12.445)
# Assuming the robot has accurately turned 90 degrees,
# continue moving straight
(5.515, 120.000, 5.515)
(5.515, 119.900, 5.515)
(5.515, 119.800, 5.515)
(5.515, 119.700, 5.515)
(5.515, 119.600, 5.515)
(5.515, 119.500, 5.515)
$